package main

import "fmt"

func main() {
	// ! Funciones Vari치ticas
	a := sum(1)
	b := sum(1, 2)
	c := sum(1, 2, 3)
	d := sum(1, 2, 3, 4)
	e := sum(1, 2, 3, 4, 5)
	fmt.Println(a)
	fmt.Println(b)
	fmt.Println(c)
	fmt.Println(d)
	fmt.Println(e)

	//* Incluso puede no recibir ning칰n valor y usar치 el valor cero del tipo de dato
	f := sum()
	fmt.Println(f)

	//? Prueba con strings
	g := sum2()
	h := sum2("Hola")
	i := sum2(h, "Como")
	j := sum2(i, "Est치s", "?")
	fmt.Println(g)
	fmt.Printf("%q\n", g)
	fmt.Println(j)
	fmt.Printf("%q\n", j)

	// ! Funciones an칩nimas
	//* Le podemos asignar la funci칩n a una variable (variables de tipo funci칩n)
	hello := func() {
		fmt.Println("游뱈")
	}
	//* Para llamarla ponemos el nombre de la variable y los par칠ntesis
	hello()

	//*Funciones an칩nimas con par치metros
	hello2 := func(a string) {
		fmt.Println(a + " 游뱈")
	}
	hello2(j)

	//*Funciones an칩nimas con retorno
	hello3 := func(a string) (r string) {
		return a + " 游뱈"
	}
	aux := hello3(j)
	fmt.Println(aux)

	//*Se le puede indica a go que autoejecute la funci칩n an칩nima cuando llegue a la l칤nea donde esta est칠
	//* No se la agrega a ninguna variable y se colocan () al final de las {}
	func() {
		fmt.Println("Esta funci칩n se autoejecuta")
	}()

	func() {
		//* Puedo usar las variables sin pasarlas por par치metro
		fmt.Println("Esta funci칩n se autoejecuta " + j)
		//* Ac치 si yo modifico j deber칤a modificarse el real
		//* Si lo modifico en la funci칩n de abajo solo se modificar칤a la copia
		j = "Esta es la nueva j"
	}()

	//* Ejemplo pas치ndole variables por par치metro
	//* En el par칠ntesis de abajo se le pasa la variable a utilizar
	func(a string) {
		//* Puedo usar las variables sin pasarlas por par치metro
		fmt.Println(a)
		fmt.Println("Esta funci칩n se autoejecuta " + a)
		a = "Esta es la a"
		fmt.Println(a)
	}(j)
	fmt.Println(j)

}

// ! Funciones Vari치ticas
// * Permite recibir un n칰mero n de par치metros
// * Al momento de determinar el tipo de dato se le anteponen ...
// * Estos 3 puntos le indican a la funci칩n que debe convertir la variable en un slice
// * Lo que le permite recibir esta infinita cantidad de n칰meros
// ? No ser칤a correcto poner (nums []int) porque la funci칩n esperar치 un slice ya creado
func sum(nums ...int) int {
	//* Debemos iterar en el slice
	var sum int
	for _, v := range nums {
		sum += v
	}
	return sum
}

func sum2(str ...string) string {
	var aux string
	for _, v := range str {
		aux += " " + v
	}
	return aux
}

//* Podemos omitir varias cosas con nombrar el retorno
func sum3(nums ...int) (sum int) {
	//* Debemos iterar en el slice
	for _, v := range nums {
		sum += v
	}
	return
}

//! Funciones an칩nimas son funciones sin nombre
